#!/usr/bin/env php
<?php

ini_set('memory_limit', '1G');
set_time_limit(0);

use App\Kernel;
use Symfony\Component\Debug\Debug;
use Symfony\Component\Dotenv\Dotenv;
use Symfony\Bridge\PsrHttpMessage\Factory\HttpFoundationFactory;
use Symfony\Bridge\PsrHttpMessage\Factory\PsrHttpFactory;
use Nyholm\Psr7\Factory\Psr17Factory;

require __DIR__ . '/../vendor/autoload.php';

// The check is to ensure we don't use .env in production
if (!isset($_SERVER['APP_ENV'])) {
    if (!class_exists(Dotenv::class)) {
        throw new \RuntimeException('APP_ENV environment variable is not defined. You need to define environment variables for configuration or add "symfony/dotenv" as a Composer dependency to load variables from a .env file.');
    }
    (new Dotenv())->load(__DIR__ . '/../.env');
}

$env = $_SERVER['APP_ENV'] ?? 'prod';
$debug = (bool) ($_SERVER['APP_DEBUG'] ?? ('prod' !== $env));

if ($debug) {
    umask(0000);
    Debug::enable();
}

// Initialize kernel
$kernel = new Kernel($env, $debug);

$httpFoundationFactory = new HttpFoundationFactory();
$psr7Factory = new Psr17Factory();
$psrHttpFactory = new PsrHttpFactory($psr7Factory, $psr7Factory, $psr7Factory, $psr7Factory);

// Callback for the loop
$callback = function(Psr\Http\Message\ServerRequestInterface $request) use ($kernel, $httpFoundationFactory, $psrHttpFactory) {
    try {
        $kernel->incrementCount();
        // Convert the Psr Request to Symfony Request
        $symfonyRequest =  $httpFoundationFactory->createRequest($request);
        // Track request count per running instance of kernel
        $symfonyRequest->attributes->set('count', $kernel->getCount());
        $response = $kernel->handle($symfonyRequest);
    } catch (\Throwable $e) {
        return new React\Http\Response(
                500,
                ['Content-Type' => 'text/plain'],
                $e->getMessage()
        );
    }

    // Convert the Symfony response to Psr response
    return $psrHttpFactory->createResponse($response);
};

$loop = React\EventLoop\Factory::create();

$server = new React\Http\Server($callback);

$socket = new React\Socket\Server('0.0.0.0:8081', $loop);
$server->listen($socket);

echo "System Online http://127.0.0.1:8081\n";

$loop->run();